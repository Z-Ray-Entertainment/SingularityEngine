/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.zray.se.grapics;

import com.sun.javafx.geom.Vec3f;
import org.lwjgl.opengl.Display;
import static org.lwjgl.opengl.GL11.*;
import org.lwjgl.util.glu.GLU;
import static org.lwjgl.util.glu.GLU.gluPerspective;
import org.lwjgl.util.vector.Vector3f;

/**
 *
 * @author vortex
 */
public class Camera {
    public static enum CameraMode{PERSPECTIVE, ORTHOGRAPHIC};
    
    private CameraMode camMode = CameraMode.PERSPECTIVE;
    private Vector3f pos = new Vector3f(0, 0, 0), rot = new Vector3f(0, 0, 0);
    private float near = 0.1f, far = 100, ratio = 1, fov = 50;
    private String camName = "Camera";
    
    public Camera(){
        calcRatio();
        ratio = ((float) Display.getWidth() / (float) Display.getHeight());
    }
    
    public void setCameraName(String name){
        camName = name;
    }
    
    public String getCameraName(){
        return camName;
    }
    
    public void setPosition(float x, float y, float z){
        pos = new Vector3f(x, y, z);
    }
    
    public void setRotation(float x, float y, float z){
        rot = new Vector3f(x, y, z);
    }
    
    public Vector3f getPosition(){
        return pos;
    }
    
    public Vector3f getRotation(){
        return rot;
    }
    
    public void setPerspectiveRendering(boolean enabled){
        if(enabled){
            camMode = CameraMode.PERSPECTIVE;
        }
        else{
            camMode = CameraMode.ORTHOGRAPHIC;
        }
    }
    
    private float calcRatio(){
        if(Display.wasResized()){
            return ratio = ((float) Display.getWidth() / (float) Display.getHeight());
        }
        return ratio;
    }
    
    public void applyCamera(){
        glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
        switch(camMode){
            case ORTHOGRAPHIC :
                glOrtho(0, Display.getWidth(), Display.getHeight(), 0, near, far);
                break;
            case PERSPECTIVE :
                gluPerspective(fov, calcRatio(), near, far);
                break;
        }
        glTranslated(-pos.x, -pos.y, -pos.z);
        glRotated(rot.x, 1, 0, 0);
        glRotated(rot.y, 0, 1, 0);
        glRotated(rot.z, 0, 0, 1);
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.zray.se.grapics.semesh;

import java.nio.FloatBuffer;
import java.util.List;
import org.lwjgl.BufferUtils;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL15.*;

/**
 *
 * @author vortex
 */
public class SEVBO {
    public static enum VBOMode{STATIC, DYNAMIC};
    
    private VBOMode mode = VBOMode.STATIC;
    private int size = 0, vboID = -1;
    private FloatBuffer vboData;
    private List<SEVertex> vertecies;
    private List<SEFace> faces;
    
    /**
     * ONLY WORKS WITH TRIANGULATED MESHES
     * @param vertecies
     * @param faces
     * @param mode 
     */
    public SEVBO(List<SEVertex> vertecies, List<SEFace> faces, VBOMode mode){
        this.mode = mode;
        this.faces = faces;
        this.vertecies = vertecies;
    }
    
    private void buildVBO(){
        size = (vertecies.size()*8); //Größe für den FloatBuffer (8 Werte pro Vertex)
        vboData = BufferUtils.createFloatBuffer(size);
        
        for(int i = 0; i < faces.size(); i++){
            vboData.put(vertecies.get(faces.get(i).v1).vX);
            vboData.put(vertecies.get(faces.get(i).v1).vY);
            vboData.put(vertecies.get(faces.get(i).v1).vZ);
            vboData.put(vertecies.get(faces.get(i).v1).normal.nX);
            vboData.put(vertecies.get(faces.get(i).v1).normal.nY);
            vboData.put(vertecies.get(faces.get(i).v1).normal.nZ);
            vboData.put(vertecies.get(faces.get(i).v1).u);
            vboData.put(vertecies.get(faces.get(i).v1).v);
            
            vboData.put(vertecies.get(faces.get(i).v2).vX);
            vboData.put(vertecies.get(faces.get(i).v2).vY);
            vboData.put(vertecies.get(faces.get(i).v2).vZ);
            vboData.put(vertecies.get(faces.get(i).v2).normal.nX);
            vboData.put(vertecies.get(faces.get(i).v2).normal.nY);
            vboData.put(vertecies.get(faces.get(i).v2).normal.nZ);
            vboData.put(vertecies.get(faces.get(i).v2).u);
            vboData.put(vertecies.get(faces.get(i).v2).v);
            
            vboData.put(vertecies.get(faces.get(i).v3).vX);
            vboData.put(vertecies.get(faces.get(i).v3).vY);
            vboData.put(vertecies.get(faces.get(i).v3).vZ);
            vboData.put(vertecies.get(faces.get(i).v3).normal.nX);
            vboData.put(vertecies.get(faces.get(i).v3).normal.nY);
            vboData.put(vertecies.get(faces.get(i).v3).normal.nZ);
            vboData.put(vertecies.get(faces.get(i).v3).u);
            vboData.put(vertecies.get(faces.get(i).v3).v);
        }
        vboData.flip();
        vboID = glGenBuffers();
        
        switch(mode){
            case DYNAMIC :
                glBindBuffer(GL_ARRAY_BUFFER, vboID);
                glBufferData(GL_ARRAY_BUFFER, vboData, GL_DYNAMIC_DRAW);
                break;
            case STATIC :
                glBindBuffer(GL_ARRAY_BUFFER, vboID);
                glBufferData(GL_ARRAY_BUFFER, vboData, GL_STATIC_DRAW);
                break;
        }
	vboData.clear();
        vertecies = null;
        faces = null;
    }
    
    public void render(){
        if(vboID == -1){
            buildVBO();
        }
        
        glEnableClientState(GL_VERTEX_ARRAY);
        glBindBuffer(GL_ARRAY_BUFFER, vboID);
        glVertexPointer(3, GL_FLOAT, 32, 0);
        
        glEnableClientState(GL_NORMAL_ARRAY);
        glNormalPointer(GL_FLOAT, 32, 12);
        
        glEnableClientState(GL_TEXTURE_COORD_ARRAY);
        glTexCoordPointer(2, GL_FLOAT, 32, 24);
        
	glDrawArrays(GL_TRIANGLES, 0, size);
        
	glBindBuffer(GL_ARRAY_BUFFER, 0);
    }
}
